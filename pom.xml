<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.5.3</version> <!-- To set Spring version project-wide. -->
        <relativePath/> <!-- Lookup parent from repository. -->
    </parent>

    <groupId>com.miguno</groupId>
    <artifactId>java-docker-build</artifactId>
    <packaging>jar</packaging>
    <version>1.0.0-SNAPSHOT</version>
    <name>java-docker-build</name>
    <description>A template project to create a minimal Docker image for a Java application</description>
    <url>https://github.com/miguno/java-docker-build-tutorial</url>
    <inceptionYear>2018</inceptionYear>

    <licenses>
        <license>
            <name>Apache License 2.0</name>
            <url>https://www.apache.org/licenses/LICENSE-2.0.html</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <developers>
        <developer>
            <id>miguno</id>
            <name>Michael G. Noll</name>
            <roles>
                <role>author</role>
            </roles>
            <timezone>Europe/Berlin</timezone>
        </developer>
    </developers>

    <scm>
        <url>https://github.com/miguno/java-docker-build-tutorial</url>
        <connection>scm:git:https://github.com/miguno/java-docker-build-tutorial.git</connection>
        <developerConnection>scm:git:git@github.com:miguno/java-docker-build-tutorial.git</developerConnection>
        <tag>HEAD</tag>
    </scm>

    <properties>
        <!-- Project -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- Java -->
        <java.version>22</java.version>
        <release.version>${java.version}</release.version>
        <maven.compiler.parameters>true</maven.compiler.parameters>
        <maven.compiler.release>${java.version}</maven.compiler.release>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <!-- Dependencies (other than Maven plugins) -->
        <micrometer.version>1.15.1</micrometer.version>
        <springdoc.version>2.8.9</springdoc.version>
        <spring-boot-admin.version>3.4.5</spring-boot-admin.version>
        <!-- Maven plugins -->
        <maven-project-info-reports-plugin.version>3.9.0</maven-project-info-reports-plugin.version>
        <maven-enforcer-plugin.version>3.5.0</maven-enforcer-plugin.version>
        <maven-compiler-plugin.version>3.14.0</maven-compiler-plugin.version>
        <maven-javadoc-plugin.version>3.11.2</maven-javadoc-plugin.version>
        <maven-surefire-plugin.version>3.5.3</maven-surefire-plugin.version>
        <git-build-hook-maven-plugin.version>3.5.0</git-build-hook-maven-plugin.version>
        <jacoco.version>0.8.13</jacoco.version>
        <spotbugs.version>4.9.3</spotbugs.version>
        <spotbugs-maven-plugin.version>4.9.3.0</spotbugs-maven-plugin.version>
        <findsecbugs.version>1.14.0</findsecbugs.version> <!-- spotbugs plugin for security audits of web apps -->
        <spotless.version>2.44.5</spotless.version>
        <therapi.version>0.15.0</therapi.version>
        <!-- Test-related settings -->
        <skipTests>false</skipTests>    <!-- To skip all tests with `-DskipTests` on CLI. -->
        <skipITs>${skipTests}</skipITs> <!-- To skip integration tests (failsafe) with `-DskipITs` -->
        <skipUTs>${skipTests}</skipUTs> <!-- To skip unit tests (surefire) with `-DskipUTs` (non-standard property) -->
        <!--
            As per Jacoco:
            https://www.eclemma.org/jacoco/trunk/doc/prepare-agent-mojo.html

            This empty property setting for `argLine` is required for our
            surefire/failsafe setups (which customize `argLine`) to prevent
            tests failing, e.g. in IntelliJ IDEA, with
            "Could not find or load main class".
        -->
        <argLine/>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <!-- https://docs.spring.io/spring-boot/reference/actuator/enabling.html#page-title -->
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <!--
                https://springdoc.org/#javadoc-support
            -->
            <groupId>com.github.therapi</groupId>
            <artifactId>therapi-runtime-javadoc</artifactId>
            <version>${therapi.version}</version>
        </dependency>

        <dependency>
            <!--
                Exposes metrics via a Prometheus actuator endpoint.

                Adds the following endpoint:
                1. `/actuator/prometheus`

                https://docs.spring.io/spring-boot/api/rest/actuator/prometheus.html#prometheus
                https://docs.micrometer.io/micrometer/reference/implementations/prometheus.html
            -->
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
            <version>${micrometer.version}</version>
        </dependency>

        <dependency>
            <!--
                Integrates Spring Boot and Swagger UI.
                https://springdoc.org/

                By default, adds the following two endpoints:
                1. `/swagger-ui.html` - Swagger UI page (HTML)
                2. `/v3/api-docs`     - OpenAPI description (JSON)
            -->
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${springdoc.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-common</artifactId>
            <version>${springdoc.version}</version>
        </dependency>

        <dependency>
            <!--
                Static analysis of Java source code.
                https://github.com/spotbugs/spotbugs
            -->
            <groupId>com.github.spotbugs</groupId>
            <artifactId>spotbugs-annotations</artifactId>
            <version>${spotbugs.version}</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <!--
          For `mvn package`: Set the name of the packaged (uber / fat) jar.
          The ".jar" file extension will be added automatically.
        -->
        <finalName>app</finalName>

        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>${maven-enforcer-plugin.version}</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                </plugin>

                <!-- To run unit tests. Skip unit tests with `-DskipUTs` on CLI. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                </plugin>

                <!-- To run integration tests. Skip integration tests with `-DskipITs` on CLI. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                </plugin>

                <!-- To generate API documentation (javadocs). -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${maven-javadoc-plugin.version}</version>
                </plugin>

                <!-- To run static code analysis. -->
                <plugin>
                    <groupId>com.github.spotbugs</groupId>
                    <artifactId>spotbugs-maven-plugin</artifactId>
                    <version>${spotbugs-maven-plugin.version}</version>
                    <dependencies>
                        <!--
                            We overwrite the dependency on spotbugs to specify
                            the exact version of spotbugs we want.
                        -->
                        <dependency>
                            <groupId>com.github.spotbugs</groupId>
                            <artifactId>spotbugs</artifactId>
                            <version>${spotbugs.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>

                <!-- To run code coverage checks and reports. -->
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>${jacoco.version}</version>
                </plugin>

                <!-- To format and lint the sources. -->
                <plugin>
                    <groupId>com.diffplug.spotless</groupId>
                    <artifactId>spotless-maven-plugin</artifactId>
                    <version>${spotless.version}</version>
                </plugin>

                <!-- To run git hooks locally as part of maven's lifecycle. -->
                <plugin>
                    <groupId>com.rudikershaw.gitbuildhook</groupId>
                    <artifactId>git-build-hook-maven-plugin</artifactId>
                    <version>${git-build-hook-maven-plugin.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <!-- https://maven.apache.org/enforcer/maven-enforcer-plugin/ -->
            <plugin>
                <inherited>true</inherited>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <executions>
                    <execution>
                        <id>enforce-maven-version</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>3.9.0</version>
                                </requireMavenVersion>
                            </rules>
                            <fail>true</fail>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <!--
                        Explicitly enable annotation processing.
                        https://inside.java/2023/07/29/quality-heads-up/
                        https://github.com/quarkusio/quarkus/issues/37532
                    -->
                    <compilerArgument>-proc:full</compilerArgument>
                    <parameters>${maven.compiler.parameters}</parameters>

                    <!--
                        Integrate Javadoc annotations and comments into
                        Swagger/OpenAPI>
                        https://springdoc.org/#javadoc-support
                    -->
                    <annotationProcessorPaths>
                        <path>
                            <groupId>com.github.therapi</groupId>
                            <artifactId>therapi-runtime-javadoc-scribe</artifactId>
                            <version>${therapi.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <!--
                        `@{argLine}` must be included here, otherwise jacoco may
                        fail. You can add extra arguments after `@{argLine}`.
                        https://www.eclemma.org/jacoco/trunk/doc/prepare-agent-mojo.html
                        https://maven.apache.org/surefire/maven-surefire-plugin/faq.html#late-property-evaluation
                    -->
                    <argLine>@{argLine} -XX:+EnableDynamicAgentLoading</argLine>
                    <!-- `forkCount` (default: 1) must not be zero for jacoco. -->
                    <forkCount>1</forkCount>
                    <skipTests>${skipUTs}</skipTests>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <configuration>
                    <!--
                        `@{argLine}` must be included here, otherwise jacoco may
                        fail. You can add extra arguments after `@{argLine}`.
                        https://www.eclemma.org/jacoco/trunk/doc/prepare-agent-mojo.html
                        https://maven.apache.org/surefire/maven-surefire-plugin/faq.html#late-property-evaluation
                    -->
                    <argLine>@{argLine} -XX:+EnableDynamicAgentLoading</argLine>
                    <!-- `forkCount` (default: 1) must not be zero for jacoco. -->
                    <forkCount>1</forkCount>
                    <skipTests>${skipTests}</skipTests>
                    <skipITs>${skipITs}</skipITs>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!--
                    Usage:
                    - `./mvnw jacoco:help
                    - `./mvnw help:describe -Dplugin=org.jacoco:jacoco-maven-plugin -Ddetail`
                -->
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <destFile>${project.basedir}/target/jacoco-unit.exec</destFile>
                        </configuration>
                    </execution>
                    <execution>
                        <id>default-prepare-agent-integration</id>
                        <goals>
                            <goal>prepare-agent-integration</goal>
                        </goals>
                        <configuration>
                            <destFile>${project.basedir}/target/jacoco-integration.exec</destFile>
                            <append>true</append>
                        </configuration>
                    </execution>
                    <execution>
                        <id>default-report</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>merge</goal>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <!-- merge configuration -->
                            <destFile>${project.basedir}/target/jacoco.exec</destFile>
                            <fileSets>
                                <fileSet>
                                    <directory>${project.basedir}/target/</directory>
                                    <includes>
                                        <include>jacoco-*.exec</include>
                                    </includes>
                                </fileSet>
                            </fileSets>
                            <!-- report configuration -->
                            <dataFile>${project.basedir}/target/jacoco.exec</dataFile>
                        </configuration>
                    </execution>
                    <execution>
                        <id>default-report-integration</id>
                        <goals>
                            <goal>report-integration</goal>
                        </goals>
                        <configuration>
                            <dataFile>${project.basedir}/target/jacoco.exec</dataFile>
                        </configuration>
                    </execution>
                    <execution>
                        <id>default-check</id>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <rule>
                                    <element>BUNDLE</element>
                                    <limits>
                                        <limit>
                                            <counter>COMPLEXITY</counter>
                                            <value>COVEREDRATIO</value>
                                            <minimum>0.60</minimum>
                                        </limit>
                                    </limits>
                                </rule>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--
                https://spotbugs.github.io/spotbugs-maven-plugin/
                Run `./mvnw spotbugs:help` for usage.
            -->
            <plugin>
                <groupId>com.github.spotbugs</groupId>
                <artifactId>spotbugs-maven-plugin</artifactId>
                <!-- IMPORTANT: Should match spotbugs configuration for `<reporting>` below. -->
                <configuration>
                    <effort>Max</effort>
                    <threshold>Low</threshold>
                    <failOnError>true</failOnError>
                    <includeFilterFile>spotbugs-include.xml</includeFilterFile>
                    <excludeFilterFile>spotbugs-exclude.xml</excludeFilterFile>
                    <plugins>
                        <!-- https://github.com/find-sec-bugs/find-sec-bugs -->
                        <plugin>
                            <groupId>com.h3xstream.findsecbugs</groupId>
                            <artifactId>findsecbugs-plugin</artifactId>
                            <version>${findsecbugs.version}</version>
                        </plugin>
                    </plugins>

                    <!-- XML output settings are not needed in the `<reporting>` section. -->
                    <xmlOutput>true</xmlOutput>
                    <xmlOutputDirectory>${project.basedir}/target/site</xmlOutputDirectory>
                </configuration>
                <executions>
                    <!-- Run `spotbugs:check` when running `./mvnw package`. -->
                    <execution>
                        <id>mvn-package-runs-spotbugs</id>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <phase>package</phase>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>com.diffplug.spotless</groupId>
                <artifactId>spotless-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>apply</goal>
                        </goals>
                        <phase>compile</phase>
                    </execution>
                </executions>
                <configuration>
                    <!-- Optional: Limit format enforcement to just the files changed by a particular branch. -->
                    <!-- <ratchetFrom>origin/main</ratchetFrom> -->

                    <!-- Language-specific formatting -->
                    <java>
                        <includes>
                            <include>src/main/java/**/*.java</include>
                            <include>src/test/java/**/*.java</include>
                        </includes>
                        <googleJavaFormat/>
                        <importOrder>
                            <order>java|javax,,\#</order>
                        </importOrder>
                        <removeUnusedImports/>
                        <formatAnnotations/>
                    </java>
                </configuration>
            </plugin>

            <plugin>
                <groupId>com.rudikershaw.gitbuildhook</groupId>
                <artifactId>git-build-hook-maven-plugin</artifactId>
                <version>${git-build-hook-maven-plugin.version}</version>
                <configuration>
                    <gitConfig>
                        <!-- Directory that stores our git hooks. -->
                        <core.hooksPath>hooks/</core.hooksPath>
                    </gitConfig>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <!-- Sets git config specified under configuration > gitConfig. -->
                            <goal>configure</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>pre-integration-test</id>
                        <goals>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>post-integration-test</id>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>${maven-project-info-reports-plugin.version}</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>${maven-javadoc-plugin.version}</version>
            </plugin>

            <!-- Create a spotbugs report when running `./mvnw site`. -->
            <plugin>
                <groupId>com.github.spotbugs</groupId>
                <artifactId>spotbugs-maven-plugin</artifactId>
                <version>${spotbugs-maven-plugin.version}</version>
                <!-- IMPORTANT: Should match spotbugs configuration for `<build>` above. -->
                <configuration>
                    <jvmArgs>-Duser.language=en</jvmArgs>
                    <effort>Max</effort>
                    <threshold>Low</threshold>
                    <failOnError>true</failOnError>
                    <includeFilterFile>spotbugs-include.xml</includeFilterFile>
                    <excludeFilterFile>spotbugs-exclude.xml</excludeFilterFile>
                    <plugins>
                        <!-- https://github.com/find-sec-bugs/find-sec-bugs -->
                        <plugin>
                            <groupId>com.h3xstream.findsecbugs</groupId>
                            <artifactId>findsecbugs-plugin</artifactId>
                            <version>${findsecbugs.version}</version>
                        </plugin>
                    </plugins>
                </configuration>
            </plugin>
        </plugins>
    </reporting>

</project>
